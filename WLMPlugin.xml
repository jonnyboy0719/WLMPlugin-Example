<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WLMPlugin</name>
    </assembly>
    <members>
        <member name="T:WLMPlugin.HookReturnCode">
            <summary>
            Tells what kind of state the hook should return as
            </summary>
        </member>
        <member name="F:WLMPlugin.HookReturnCode.CONTINUE">
            <summary>
            Continues the function
            </summary>
        </member>
        <member name="F:WLMPlugin.HookReturnCode.HANDLED">
            <summary>
            Stops the function from continuing. This may also stop other plugins using the same function.
            </summary>
        </member>
        <member name="T:WLMPlugin.Events">
            <summary>
            The possible events that our hook will be able to use
            </summary>
        </member>
        <member name="F:WLMPlugin.Events.SoundEvent">
            <summary>
            Overrides sound events from the client. For example, can be used to override or use random sounds from said plugin
            </summary>
        </member>
        <member name="F:WLMPlugin.Events.MessageRecieved">
            <summary>
            When a message is being recieved from another user
            </summary>
        </member>
        <member name="F:WLMPlugin.Events.FriendLogin">
            <summary>
            When someone from your contact list has logged in
            </summary>
        </member>
        <member name="F:WLMPlugin.Events.FriendRequest">
            <summary>
            When a new friend request has been recieved
            </summary>
        </member>
        <member name="T:WLMPlugin.Hooks">
            <summary>
            Plugin Hooks class. Tells the client to override certain things if allowed.
            </summary>
        </member>
        <member name="M:WLMPlugin.Hooks.ClearRegisteredHooks">
            <summary>
            Clears our registered hooks, if there is any
            </summary>
        </member>
        <member name="M:WLMPlugin.Hooks.IsHookRegistered(WLMPlugin.Events)">
            <summary>
            Checks if said hook has been registered or not
            </summary>
            <param name="handle">The event we want check if it's already registered or not</param>
            <returns>Returns true if an event has already been registered</returns>
        </member>
        <member name="M:WLMPlugin.Hooks.RegisterHook(WLMPlugin.Events)">
            <summary>
            Registers the possible events that the plugin can override and/or change
            </summary>
            <param name="handle">The event that will be registered</param>
            <returns>Returns true if the hook haven't already been registered</returns>
        </member>
        <member name="T:WLMPlugin.BaseClientPlugin">
            <summary>
            Base client plugin
            </summary>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.#ctor">
            <summary>
            The base of the class
            </summary>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.Finalize">
            <summary>
            When the plugin gets destroyed
            </summary>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.OnHook_EventSound(System.String)">
            <summary>
            When the client is trying to play a sound
            </summary>
            <param name="sound">The sound the client is trying to play</param>
            <returns>Returns the hook state</returns>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.OnHook_MessageRecieved(System.String,System.String)">
            <summary>
            When we recieve a message from someone
            </summary>
            <param name="id">The ID of the sender</param>
            <param name="message">The message of the sender</param>
            <returns>Returns the hook state</returns>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.OnHook_FriendLogin(System.String,System.String)">
            <summary>
            When someone from our friend list has logged in
            </summary>
            <param name="id">The ID of the user that logged in</param>
            <param name="name">The name of the user that logged in</param>
            <returns>Returns the hook state</returns>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.OnHook_FriendRequest(System.String)">
            <summary>
            When we recieve a friend request
            </summary>
            <param name="name">The name of the user</param>
            <returns>Returns the hook state</returns>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.SetAuthor(System.String)">
            <summary>
            Specifies the author of the plugin
            </summary>
            <param name="auth">The author of the plugin</param>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.SetName(System.String)">
            <summary>
            Specifies the name of the plugin
            </summary>
            <param name="name">The name of the plugin</param>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.SetVersion(System.String)">
            <summary>
            Specifies the version of the plugin
            </summary>
            <param name="version">The version number</param>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.GetPluginInformation">
            <summary>
            This will retrieve our plugin information.
            </summary>
            <returns>Returns the information of this plugin</returns>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.AddToDataBlock(WLMPlugin.PluginDataBlock)">
            <summary>
            Adds new data blocks into the plugin
            </summary>
            <param name="data">The specified data block</param>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.LoadConfig(System.Collections.Generic.List{WLMPlugin.PluginDataBlock})">
            <summary>
            Loads the configuration file
            </summary>
            <param name="datalist">The datablocks that was loaded from the config file</param>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.GetDataBlock(System.String)">
            <summary>
            Grabs the datablock
            </summary>
            <param name="ID">The specified ID to look for</param>
            <returns>Returns the specified datablock, if it's valid.</returns>
        </member>
        <member name="M:WLMPlugin.BaseClientPlugin.GetDataBlock(System.String,System.Collections.Generic.List{WLMPlugin.PluginDataBlock})">
            <summary>
            Grabs the datablock from a specified list
            </summary>
            <param name="ID">The specified ID to look for</param>
            <param name="datalist">The datalist to look trough</param>
            <returns>Returns the specified datablock, if it's valid.</returns>
        </member>
        <member name="T:WLMPlugin.UpdateInformation">
            <summary>
            Tells what kind of information UpdateStruct should send
            </summary>
        </member>
        <member name="T:WLMPlugin.DataBlockType">
            <summary>
            Tells the PluginDataBlock what kind of type it is, so that we can properly read it
            </summary>
        </member>
        <member name="T:WLMPlugin.PluginDataBlock">
            <summary>
            Plugin Datablocks are used by the plugin to set custom values which can be modified by the client.
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.Name">
            <summary>
            The name for the data block
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.ID">
            <summary>
            The ID for the data block
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.Data">
            <summary>
            This contains the information, such as simple statements to file paths
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.Type">
            <summary>
            Specifies what kind of data block this is
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.SaveToConfig">
            <summary>
            Saves the data block as a plugin config variable
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.EnableMaxValue">
            <summary>
            Enables max amount of value. Only available for interger and float values
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.EnableMinValue">
            <summary>
            Enables min amount of value. Only available for interger and float values
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.Min">
            <summary>
            The minimum value for interger and float values, if enabled.
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginDataBlock.Max">
            <summary>
            The maximum value for interger and float values, if enabled.
            </summary>
        </member>
        <member name="T:WLMPlugin.PluginInformation">
            <summary>
            Contains the information of the plugin, such as name, author, version and much more
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginInformation.Name">
            <summary>
            The name of the plugin
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginInformation.Author">
            <summary>
            The author of the plugin
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginInformation.Version">
            <summary>
            The version number
            </summary>
        </member>
        <member name="P:WLMPlugin.PluginInformation.DataBlock">
            <summary>
            The list of datablocks
            </summary>
        </member>
        <member name="T:WLMPlugin.UpdateStruct">
            <summary>
            The update structure that will be sent to the client
            </summary>
        </member>
        <member name="P:WLMPlugin.UpdateStruct.data">
            <summary>
            The data object should handle all the data that's being sent to the client
            </summary>
        </member>
        <member name="P:WLMPlugin.UpdateStruct.inf">
            <summary>
            Specifies the information we want to update
            </summary>
        </member>
        <member name="M:WLMPlugin.UpdateStruct.#ctor(System.Object,WLMPlugin.UpdateInformation)">
            <summary>
            Creates the update information to be read by the client
            </summary>
            <param name="data">The specified data we want to send to the client</param>
            <param name="inf">The type of information we are sending</param>
        </member>
    </members>
</doc>
